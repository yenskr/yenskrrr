[
    {
        "ref": "/blog/split-one-column-to-two-columns2/",
        "title": "split one column to two columns2",
        "section": "blog",
        "date" : "2019.07.30",
        "body": " Preface 清理資料的時候，常常會需要用到dplyr套件裡mutate、group_by、summarise等函式（dplyr跟pipeline運算子%\u0026gt;%應該是每個初學R做資料分析的人必學的套件吧，沒學過不要說你會R）。\n今天除了紀錄一下在解實際問題時個人的思路解法，還會介紹一個tidyr套件的函式，有需要的朋友可以參考看看。\nContext 最近收到一份資料，其中有個欄位像這樣:\n\u0026gt; head(df$GPS) [1] \u0026quot;22.627126,120.312473\u0026quot; \u0026quot;22.624569,120.360211\u0026quot; [3] \u0026quot;22.611157,120.329407\u0026quot; \u0026quot;22.657952,120.324472\u0026quot;  需求很簡單，就是把df的GPS欄位拆開成LNG,LAT兩個欄位。\nProblem  把一個 data frame 的欄位切開成兩個欄位\n Solution1：using base function 先記錄一下自己使用基本函式的解法思路\n 使用strsplit把資料分開\n\u0026gt; strsplit(dt$發生地點GPS, ',') [[1]] [1] \u0026quot;22.627126\u0026quot; \u0026quot;120.312473\u0026quot; [[2]] [1] \u0026quot;22.624569\u0026quot; \u0026quot;120.360211\u0026quot; [[3]] [1] \u0026quot;22.611157\u0026quot; \u0026quot;120.329407\u0026quot; [[4]] [1] \u0026quot;22.657952\u0026quot; \u0026quot;120.324472\u0026quot; [[5]] [1] \u0026quot;22.639282\u0026quot; \u0026quot;120.330766\u0026quot; [[6]] [1] \u0026quot;22.641744\u0026quot; \u0026quot;120.313873\u0026quot;  可以發現雖然成功切開，不過變成 List of lists 的形式\n 這時我們只要善用sapply搭配[就可以取出每個list中的第1個元素\n 搭配mutate的效果：\n\u0026gt; dt %\u0026gt;% mutate( lat=sapply(strsplit(dt$發生地點GPS,','),\u0026quot;[\u0026quot;,1), lng=sapply(strsplit(dt$發生地點GPS,','),\u0026quot;[\u0026quot;,2) ) %\u0026gt;% select(lat,lng) # A tibble: 2,790 x 2 lat lng \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; 1 22.627126 120.312473 2 22.624569 120.360211 3 22.611157 120.329407 4 22.657952 120.324472 5 22.639282 120.330766 6 22.641744 120.313873 7 22.644323 120.298523 8 22.647354 120.314703 9 22.633798 120.313527 10 22.633798 120.313527 # ... with 2,780 more rows   Solution2：using tidyr::seperate 後來在找相關資料的時候，找到了tidyr的seperate，直接一行搞定。\nseperate {tidyr}的help document標題寫得很清楚：\n Separate a character column into multiple columns using a regular expression separator.\n 實際操作試試看\n\u0026gt; dt %\u0026gt;% separate(發生地點GPS, c(\u0026quot;lat\u0026quot;, \u0026quot;lng\u0026quot;),sep=',') %\u0026gt;% select(lat,lng) # A tibble: 2,790 x 2 lat lng \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; 1 22.627126 120.312473 2 22.624569 120.360211 3 22.611157 120.329407 4 22.657952 120.324472 5 22.639282 120.330766 6 22.641744 120.313873 7 22.644323 120.298523 8 22.647354 120.314703 9 22.633798 120.313527 10 22.633798 120.313527 # ... with 2,780 more rows  還有很多延伸的用法，有機會再來研究。\nReference  https://tidyr.tidyverse.org/reference/separate.html https://stackoverflow.com/questions/4350440/split-data-frame-string-column-into-multiple-columns  tags: R tidyr data wrangling "
    }
,
    {
        "ref": "/blog/split-one-column-to-two-columns3/",
        "title": "split one column to two columns3",
        "section": "blog",
        "date" : "2019.07.30",
        "body": " Preface 清理資料的時候，常常會需要用到dplyr套件裡mutate、group_by、summarise等函式（dplyr跟pipeline運算子%\u0026gt;%應該是每個初學R做資料分析的人必學的套件吧，沒學過不要說你會R）。\n今天除了紀錄一下在解實際問題時個人的思路解法，還會介紹一個tidyr套件的函式，有需要的朋友可以參考看看。\nContext 最近收到一份資料，其中有個欄位像這樣： \u0026gt; head(df$GPS)\r[1] \u0026#34;22.627126,120.312473\u0026#34; \u0026#34;22.624569,120.360211\u0026#34;\r[3] \u0026#34;22.611157,120.329407\u0026#34; \u0026#34;22.657952,120.324472\u0026#34;\n需求很簡單，就是把df的GPS欄位拆開成LNG,LAT兩個欄位。\nProblem  把一個 data frame 的欄位切開成兩個欄位\n Solution1：using base function 先記錄一下自己使用基本函式的解法思路\n 使用strsplit把資料分開 \u0026gt; strsplit(dt$發生地點GPS, \u0026#39;,\u0026#39;)\r[[1]]\r[1] \u0026#34;22.627126\u0026#34; \u0026#34;120.312473\u0026#34;\r[[2]]\r[1] \u0026#34;22.624569\u0026#34; \u0026#34;120.360211\u0026#34;\r[[3]]\r[1] \u0026#34;22.611157\u0026#34; \u0026#34;120.329407\u0026#34;\r[[4]]\r[1] \u0026#34;22.657952\u0026#34; \u0026#34;120.324472\u0026#34;\r[[5]]\r[1] \u0026#34;22.639282\u0026#34; \u0026#34;120.330766\u0026#34;\r[[6]]\r[1] \u0026#34;22.641744\u0026#34; \u0026#34;120.313873\u0026#34;\r 可以發現雖然成功切開，不過變成 List of lists 的形式 這時我們只要善用sapply搭配[就可以取出每個list中的第1個元素 搭配mutate的效果： \u0026gt; dt %\u0026gt;% mutate(\rlat=sapply(strsplit(dt$發生地點GPS,\u0026#39;,\u0026#39;),\u0026#34;[\u0026#34;,1),\rlng=sapply(strsplit(dt$發生地點GPS,\u0026#39;,\u0026#39;),\u0026#34;[\u0026#34;,2)\r) %\u0026gt;% select(lat,lng)\r# A tibble: 2,790 x 2\r lat lng \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; 1 22.627126 120.312473\r2 22.624569 120.360211\r3 22.611157 120.329407\r4 22.657952 120.324472\r5 22.639282 120.330766\r6 22.641744 120.313873\r7 22.644323 120.298523\r8 22.647354 120.314703\r9 22.633798 120.313527\r10 22.633798 120.313527\r# ... with 2,780 more rows\r   Solution2：using tidyr::seperate 後來在找相關資料的時候，找到了tidyr的seperate，直接一行搞定。\nseperate {tidyr}的help document標題寫得很清楚：\n Separate a character column into multiple columns using a regular expression separator.\n 實際操作試試看 \u0026gt; dt %\u0026gt;% separate(發生地點GPS, c(\u0026#34;lat\u0026#34;, \u0026#34;lng\u0026#34;),sep=\u0026#39;,\u0026#39;) %\u0026gt;% select(lat,lng)\r# A tibble: 2,790 x 2\r lat lng \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; 1 22.627126 120.312473\r2 22.624569 120.360211\r3 22.611157 120.329407\r4 22.657952 120.324472\r5 22.639282 120.330766\r6 22.641744 120.313873\r7 22.644323 120.298523\r8 22.647354 120.314703\r9 22.633798 120.313527\r10 22.633798 120.313527\r# ... with 2,780 more rows\n還有很多延伸的用法，有機會再來研究。\nReference  https://tidyr.tidyverse.org/reference/separate.html https://stackoverflow.com/questions/4350440/split-data-frame-string-column-into-multiple-columns  tags: R tidyr data wrangling "
    }
,
    {
        "ref": "/blog/split-one-column-to-two-columns/",
        "title": "把欄位切開另存成兩個欄位",
        "section": "blog",
        "date" : "2019.07.30",
        "body": "\rPreface\r清理資料的時候，常常會需要用到dplyr套件裡mutate、group_by、summarise等函式（dplyr跟pipeline運算子%\u0026gt;%應該是每個初學R做資料分析的人必學的套件吧，沒學過不要說你會R）。\n今天除了紀錄一下在解實際問題時個人的思路解法，還會介紹一個tidyr套件的函式，有需要的朋友可以參考看看。\n\rContext\r最近收到一份資料，其中有個欄位像這樣:\nhead(df$GPS)\r## [1] \u0026quot;22.627126,120.312473\u0026quot; \u0026quot;22.624569,120.360211\u0026quot; \u0026quot;22.611157,120.329407\u0026quot;\r## [4] \u0026quot;22.657952,120.324472\u0026quot; \u0026quot;22.639282,120.330766\u0026quot; \u0026quot;22.641744,120.313873\u0026quot;\r需求很簡單，就是把df的GPS欄位拆開成LNG,LAT兩個欄位。\n\rProblem\r\r把一個 data frame 的欄位切開成兩個欄位\n\r\rSolution1：using base function\r先記錄一下自己使用基本函式的解法思路\n使用strsplit把資料分開\nstrsplit(df$GPS, \u0026#39;,\u0026#39;) %\u0026gt;% head\r## [[1]]\r## [1] \u0026quot;22.627126\u0026quot; \u0026quot;120.312473\u0026quot;\r## ## [[2]]\r## [1] \u0026quot;22.624569\u0026quot; \u0026quot;120.360211\u0026quot;\r## ## [[3]]\r## [1] \u0026quot;22.611157\u0026quot; \u0026quot;120.329407\u0026quot;\r## ## [[4]]\r## [1] \u0026quot;22.657952\u0026quot; \u0026quot;120.324472\u0026quot;\r## ## [[5]]\r## [1] \u0026quot;22.639282\u0026quot; \u0026quot;120.330766\u0026quot;\r## ## [[6]]\r## [1] \u0026quot;22.641744\u0026quot; \u0026quot;120.313873\u0026quot;\r可以發現雖然成功切開，不過變成List of list的形式\r這時我們只要善用sapply搭配[就可以取出每個list中的第一個元素\nsapply(strsplit(df$GPS, \u0026#39;,\u0026#39;) , \u0026quot;[\u0026quot;, 1) %\u0026gt;% head\r## [1] \u0026quot;22.627126\u0026quot; \u0026quot;22.624569\u0026quot; \u0026quot;22.611157\u0026quot; \u0026quot;22.657952\u0026quot; \u0026quot;22.639282\u0026quot; \u0026quot;22.641744\u0026quot;\r搭配mutate:\ndf %\u0026gt;% mutate(\rlat=sapply(strsplit(df$GPS,\u0026#39;,\u0026#39;),\u0026quot;[\u0026quot;,1),\rlng=sapply(strsplit(df$GPS,\u0026#39;,\u0026#39;),\u0026quot;[\u0026quot;,2)\r) %\u0026gt;% select(lat,lng)\r## # A tibble: 2,790 x 2\r## lat lng ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; ## 1 22.627126 120.312473\r## 2 22.624569 120.360211\r## 3 22.611157 120.329407\r## 4 22.657952 120.324472\r## 5 22.639282 120.330766\r## 6 22.641744 120.313873\r## 7 22.644323 120.298523\r## 8 22.647354 120.314703\r## 9 22.633798 120.313527\r## 10 22.633798 120.313527\r## # ... with 2,780 more rows\r\r\rSolution2：using tidyr::seperate\r後來在找相關資料的時候，找到了tidyr的seperate，直接一行搞定。\nhelp document標題就寫得很清楚：\n\rSeparate a character column into multiple columns using a regular expression separator\n\rdf %\u0026gt;% separate(GPS, c(\u0026quot;lat\u0026quot;, \u0026quot;lng\u0026quot;),sep=\u0026#39;,\u0026#39;) %\u0026gt;% select(lat,lng)\r## # A tibble: 2,790 x 2\r## lat lng ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; ## 1 22.627126 120.312473\r## 2 22.624569 120.360211\r## 3 22.611157 120.329407\r## 4 22.657952 120.324472\r## 5 22.639282 120.330766\r## 6 22.641744 120.313873\r## 7 22.644323 120.298523\r## 8 22.647354 120.314703\r## 9 22.633798 120.313527\r## 10 22.633798 120.313527\r## # ... with 2,780 more rows\r還有很多延伸的用法，有機會再來研究。\n\rReference\r\rhttps://tidyr.tidyverse.org/reference/separate.html\rhttps://stackoverflow.com/questions/4350440/split-data-frame-string-column-into-multiple-columns\r\rtags: R tidyr data wrangling\r\r\r"
    }
,
    {
        "ref": "/blog/extract-tar-file-on-win10/",
        "title": "如何在win10中解壓縮tar檔案",
        "section": "blog",
        "date" : "2019.07.29",
        "body": " 前言 當我們把程式更新推送到 shinyapps.io，會把舊的檔案蓋掉。如果想要在推送前把舊版檔案備份的話，可以先到 shinyapps.io 把專案的 bundle 整個下載下來。\n從 shinyapps.io 下載下來的 bundle 檔案是 .tar 格式，如果直接用 rar 軟體，解壓縮出來的東西是看不懂的\u0026hellip;\n問題  在win10環境下成功解壓縮 .tar 檔案\n 解法  使用 cmd 或 powershell 等工具打開命令列(個人使用 ConEmu，推薦！)，用 tar 指令解壓縮。 輸入下列指令及參數 \u0026gt; tar -xvzf [檔案路徑/file.tar] -C [解壓路徑資料夾] 參數說明:\n x — 表示指定模式為「解壓縮」，必要參數。(其他模式尚有-c、-r、-t、-u) v — verbose. 顯示詳細解壓縮過程，非必要參數。 z — tells tar to uncompressed the content of a .tar.gz file with gzip. f — instructs tar the name of the file you’re about to extract. C - 更換至[解壓路徑資料夾]。(Change to \u0026lt;dir\u0026gt; before processing remaining files) cmd 中輸入 tar --help 看更多參數說明   解壓縮成功!   參考  https://support.rstudio.com/hc/en-us/articles/204536588-Downloading-your-application-from-shinyapps-io https://pureinfotech.com/extract-tar-gz-files-windows-10/ https://anal02.pixnet.net/blog/post/113556857-tar%E8%A7%A3%E5%A3%93%E7%B8%AE%E6%8C%87%E4%BB%A4  tags: tar win10 linux cmd "
    }
,
    {
        "ref": "/blog/first-post/",
        "title": "第一篇!",
        "section": "blog",
        "date" : "2019.07.24",
        "body": " the very first post Should it be a special moment? :)\n"
    }
,
    {
        "ref": "/blog/second-post/",
        "title": "第二篇!",
        "section": "blog",
        "date" : "2019.07.24",
        "body": " 2nd post also worth remember!\n"
    }
,
    {
        "ref": "/blog/markdown-syntax/",
        "title": "Markdown Syntax Guide",
        "section": "blog",
        "date" : "2019.03.11",
        "body": "This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\n Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Inline\u0026nbsp;\u0026nbsp;\u0026nbsp; Markdown\u0026nbsp;\u0026nbsp;\u0026nbsp; In\u0026nbsp;\u0026nbsp;\u0026nbsp; Table     italics bold strikethrough\u0026nbsp;\u0026nbsp;\u0026nbsp; code    Code Blocks Code block with backticks html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block indented with four spaces \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo\u0026rsquo;s internal highlight shortcode \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Item First Sub-item Second Sub-item  Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\n The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015. [return]  "
    }
,
    {
        "ref": "/blog/rich-content/",
        "title": "Rich Content",
        "section": "blog",
        "date" : "2019.03.10",
        "body": "Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\nInstagram Simple Shortcode koloot.design   View More on Instagram   \nYouTube Privacy Enhanced Shortcode   \nTwitter Simple Shortcode “In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”\n— Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Graphic Design History (@DesignReviewed) January 17, 2019 \nVimeo Simple Shortcode "
    }
,
    {
        "ref": "/blog/placeholder-text/",
        "title": "Placeholder Text",
        "section": "blog",
        "date" : "2019.03.09",
        "body": "Mole et vultus populifer quaque primoque non Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\n Exierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude  Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\n Comas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et  Vagus elidunt \nThe Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n"
    }
,
    {
        "ref": "/blog/math-typesetting/",
        "title": "Math Typesetting",
        "section": "blog",
        "date" : "2019.03.08",
        "body": "Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\n Create a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so:  {{ if or .Params.math .Site.Params.math }} {{ partial \u0026quot;math.html\u0026quot; . }} {{ end }}   To enable KaTex globally set the parameter math to true in a project's configuration To enable KaTex on a per page basis include the parameter math: true in content files.  Note: Use the online reference of Supported TeX Functions Examples Inline math: \\( \\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887… \\)\nBlock math:\n\\[ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } \\]\n"
    }
,
    {
        "ref": "/blog/emoji-support/",
        "title": "Emoji Support",
        "section": "blog",
        "date" : "2019.03.05",
        "body": "Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site’s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 :see_no_evil: 🙉 :hear_no_evil: 🙊 :speak_no_evil:\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n.emoji { font-family: Apple Color Emoji,Segoe UI Emoji,NotoColorEmoji,Segoe UI Symbol,Android Emoji,EmojiSymbols; }"
    }
]
